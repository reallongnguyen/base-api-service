services:
  tyk-gateway:
    image: docker.tyk.io/tyk-gateway/tyk-gateway:v5.5.0
    ports:
      - 8080:8080
    networks:
      - vpc-bridge
    depends_on:
      - tyk-redis
      - auth-service
      - api-service
    volumes:
      - ./tyk-gateway/tyk.standalone.conf:/opt/tyk-gateway/tyk.conf
      - ./tyk-gateway/apps:/opt/tyk-gateway/apps
      - ./tyk-gateway/middleware:/opt/tyk-gateway/middleware
      - ./tyk-gateway/certs:/opt/tyk-gateway/certs
      - ./tyk-gateway/policies:/opt/tyk-gateway/policies
    environment:
      - TYK_GW_SECRET=${TYK_GW_SECRET}

  tyk-redis:
    image: redis:6.2.7-alpine
    volumes:
      - tyk-redis-data:/data
    networks:
      - vpc-bridge

  auth-postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      - auth-postgres-vol-data:/var/lib/postgresql/data
      - ./gotrue/db/auth.sql:/docker-entrypoint-initdb.d/auth.sql
    environment:
      POSTGRES_USER: ${GOTRUE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${GOTRUE_POSTGRES_PASSWORD}
      POSTGRES_DB: ${GOTRUE_POSTGRES_DB}
    networks:
      - vpc-bridge

  auth-service:
    image: supabase/gotrue:v2.152.1
    networks:
      - vpc-bridge
    depends_on:
      - auth-postgres
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8000/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 8000
      API_EXTERNAL_URL: ${API_EXTERNAL_URL}

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://supabase_auth_admin:${GOTRUE_POSTGRES_PASSWORD}@auth-postgres:5432/${GOTRUE_POSTGRES_DB}

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_EXTERNAL_ANONYMOUS_USERS_ENABLED: ${ENABLE_ANONYMOUS_USERS}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      # GOTRUE_MAILER_SECURE_EMAIL_CHANGE_ENABLED: true
      # GOTRUE_SMTP_MAX_FREQUENCY: 1s
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${MAILER_URLPATHS_INVITE}
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${MAILER_URLPATHS_CONFIRMATION}
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${MAILER_URLPATHS_RECOVERY}
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${MAILER_URLPATHS_EMAIL_CHANGE}

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

      # Uncomment to enable custom access token hook. You'll need to create a public.custom_access_token_hook function and grant necessary permissions.
      # See: https://supabase.com/docs/guides/auth/auth-hooks#hook-custom-access-token for details
      # GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_ENABLED="true"
      # GOTRUE_HOOK_CUSTOM_ACCESS_TOKEN_URI="pg-functions://postgres/public/custom_access_token_hook"

      # GOTRUE_HOOK_MFA_VERIFICATION_ATTEMPT_ENABLED="true"
      # GOTRUE_HOOK_MFA_VERIFICATION_ATTEMPT_URI="pg-functions://postgres/public/mfa_verification_attempt"

      # GOTRUE_HOOK_PASSWORD_VERIFICATION_ATTEMPT_ENABLED="true"
      # GOTRUE_HOOK_PASSWORD_VERIFICATION_ATTEMPT_URI="pg-functions://postgres/public/password_verification_attempt"

  api-postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      - api-pg-data:/var/lib/postgresql/data
    networks:
      - vpc-bridge
    # ports:
    #   - 5432:5432
    environment:
      POSTGRES_USER: ${API_POSTGRES_USER}
      POSTGRES_PASSWORD: ${API_POSTGRES_PASSWORD}
      POSTGRES_DB: ${API_POSTGRES_DB}

  api-redis:
    image: redis/redis-stack
    restart: unless-stopped
    networks:
      - vpc-bridge
    # environment:
    #   REDIS_ARGS: --requirepass ${REDIS_PASSWORD}
    volumes:
      - api-redis-data:/data

  api-mqtt01:
    image: emqx:latest
    restart: unless-stopped
    volumes:
      - api-vol-emqx01-data:/opt/emqx/data
      - api-vol-emqx01-log:/opt/emqx/log
    environment:
      - 'EMQX_NODE__NAME=emqx@node01.emqx.io'
      - 'EMQX_CLUSTER__DISCOVERY_STRATEGY=static'
      - 'EMQX_CLUSTER__STATIC__SEEDS=[emqx@node01.emqx.io, emqx@node02.emqx.io]'
    networks:
      vpc-bridge:
        aliases:
          - node01.emqx.io

  api-mqtt02:
    image: emqx:latest
    restart: unless-stopped
    volumes:
      - api-vol-emqx02-data:/opt/emqx/data
      - api-vol-emqx02-log:/opt/emqx/log
    environment:
      - 'EMQX_NODE__NAME=emqx@node02.emqx.io'
      - 'EMQX_CLUSTER__DISCOVERY_STRATEGY=static'
      - 'EMQX_CLUSTER__STATIC__SEEDS=[emqx@node01.emqx.io, emqx@node02.emqx.io]'
    networks:
      vpc-bridge:
        aliases:
          - node02.emqx.io

  api-service:
    build: ./base-api
    networks:
      - vpc-bridge
    depends_on:
      - api-postgres
      - api-redis
      - api-mqtt01
      - api-mqtt02
    healthcheck:
      test:
        [
          'CMD',
          'wget',
          '--no-verbose',
          '--tries=1',
          '--spider',
          'http://localhost:8000/health',
        ]
      timeout: 5s
      interval: 5s
      retries: 3
    environment:
      NODE_ENV: production
      # Common module
      APP_NAME: 'API Service'
      APP_URL: https://api.isling.me
      APP_PORT: 8000
      LOG_LEVEL: info
      ## DB
      DATABASE_URL: postgresql://${API_POSTGRES_USER}:${API_POSTGRES_PASSWORD}@api-postgres:5432/${API_POSTGRES_DB}?schema=public
      REDIS_URL: redis://api-redis:6379/0
      ## Security
      JWT_SECRET: ${JWT_SECRET}
      ## Rate limit
      THROTTLE_TTL: 60000
      THROTTLE_LIMIT: 60
      # File module
      ## Storage
      USER_ASSET_BUCKET: isling-dev01-user-asset
      ## Credentials
      GOOGLE_APPLICATION_CREDENTIALS: 'credentials/stone-arch-407908-3c3c6a5bf274.json'
      # Notification module
      NOTIFICATION_MQTT_URL: mqtt://api-mqtt01:2883
      ## unit: second
      NOTIFICATION_MERGE_THRESHOLD: 28800
      ## Distributed locks
      MUTEX_REDIS1_HOST: api-redis
      MUTEX_REDIS1_PORT: 6379
      MUTEX_REDIS2_HOST: api-redis
      MUTEX_REDIS2_PORT: 6379
      MUTEX_REDIS3_HOST: api-redis
      MUTEX_REDIS3_PORT: 6379

volumes:
  tyk-redis-data:
  auth-postgres-vol-data:
  api-pg-data:
  api-redis-data:
  api-vol-emqx01-data:
  api-vol-emqx01-log:
  api-vol-emqx02-data:
  api-vol-emqx02-log:

networks:
  vpc-bridge:
    driver: bridge
